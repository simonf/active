// Generated by CoffeeScript 1.3.3
(function() {
  var arrayEqual, db, makeCandidates, moreFrequentThan, mostFrequent, normalisevalues, removematches, root, todayMidnightAsMillis, todayStartAsMillis, uniqueDateString;

  db = require('./couch-calls');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.suggest = function(req, resp) {
    var lastfivedays, lastthreeweeks, today;
    today = [];
    lastfivedays = [];
    lastthreeweeks = [];
    db.getToday(req, function(t) {
      if (t === null || t === void 0) {
        console.log("No actions found for today");
      } else {
        today = t;
      }
      return db.getLastFiveDays(req, true, function(five) {
        lastfivedays = removematches(today, moreFrequentThan(five.rows, 4));
        return makeCandidates(req, resp, lastfivedays);
      });
    });
  };

  makeCandidates = function(req, resp, catactionarray) {
    db.getLastFiveDays(req, false, function(items) {
      var ca, item, units, values, vlist, _i, _j, _len, _len1;
      vlist = [];
      for (_i = 0, _len = catactionarray.length; _i < _len; _i++) {
        ca = catactionarray[_i];
        values = [];
        units = "";
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          if (arrayEqual(ca, item.key)) {
            values.push(item.value[0]);
            units = item.value[1];
          }
        }
        vlist.push({
          "category": ca[0],
          "action": ca[1],
          "quantity": mostFrequent(values),
          "units": units
        });
      }
      return resp.send(vlist);
    });
  };

  mostFrequent = function(valarray) {
    var max, maxv, rv, val, _i, _len;
    rv = {};
    max = 0;
    maxv = "";
    for (_i = 0, _len = valarray.length; _i < _len; _i++) {
      val = valarray[_i];
      if (rv[val] === void 0) {
        rv[val] = 1;
      } else {
        rv[val] = rv[val] + 1;
      }
      if (rv[val] > max) {
        max = rv[val];
        maxv = val;
      }
    }
    return maxv;
  };

  moreFrequentThan = function(valarray, num) {
    var retval, v, _i, _len;
    retval = [];
    for (_i = 0, _len = valarray.length; _i < _len; _i++) {
      v = valarray[_i];
      if (v.value >= num) {
        retval.push(v.key);
      }
    }
    return retval;
  };

  normalisevalues = function(keyvaluearray) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = keyvaluearray.length; _i < _len; _i++) {
      item = keyvaluearray[_i];
      _results.push(item.value);
    }
    return _results;
  };

  removematches = function(tomatch, list) {
    if (tomatch === null || tomatch.length === 0) {
      return list;
    } else {
      return list.filter(function(x) {
        var z;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = tomatch.length; _i < _len; _i++) {
            z = tomatch[_i];
            if (arrayEqual(z.key, x)) {
              _results.push(z.key);
            }
          }
          return _results;
        })()).length === 0;
      });
    }
  };

  arrayEqual = function(a, b) {
    if (typeof a === 'object' && typeof b === 'object') {
      return a.length === b.length && a.every(function(elem, i) {
        return elem === b[i];
      });
    } else {
      console.log("Can't match values that are not arrays: " + a + ", " + b);
      return false;
    }
  };

  todayStartAsMillis = function() {
    var d;
    d = new Date();
    d.setUTCHours(0);
    d.setMinutes(0);
    d.setSeconds(0);
    d.setMilliseconds(0);
    return d.getTime();
  };

  todayMidnightAsMillis = function() {
    var d;
    d = new Date();
    d.setUTCHours(23);
    d.setMinutes(59);
    d.setSeconds(59);
    d.setMilliseconds(0);
    return d.getTime();
  };

  uniqueDateString = function(timeString) {
    var d;
    d = new Date(parseInt(timeString));
    return d.getFullYear() + d.getMonth() + d.getDate();
  };

}).call(this);

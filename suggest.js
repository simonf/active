// Generated by CoffeeScript 1.3.3
(function() {
  var arrayEqual, db, makeCandidates, mostFrequent, normalisevalues, removematches, root, todayMidnightAsMillis, todayStartAsMillis, uniqueDateString;

  db = require('./couch-calls');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.suggest = function(req, resp) {
    var lastfivedays, lastthreeweeks, today;
    today = [];
    lastfivedays = [];
    lastthreeweeks = [];
    db.getToday(req, function(t) {
      today = t;
      return db.getLastFiveDays(req, function(five) {
        lastfivedays = removematches(today, normalisevalues(five));
        return resp.send(makeCandidates(lastfivedays));
      });
    });
  };

  makeCandidates = function(catactionarray) {
    var action, category, item, k, kk, retval, u, v, vv, _i, _len;
    retval = [];
    for (_i = 0, _len = catactionarray.length; _i < _len; _i++) {
      item = catactionarray[_i];
      u = "";
      for (k in item) {
        v = item[k];
        if (k !== 'unit') {
          for (kk in v) {
            vv = v[kk];
            category = k;
          }
          action = kk;
          if (vv.length > 2) {
            retval.push({
              "category": category,
              "action": action,
              "quantity": mostFrequent(vv),
              "units": item["unit"]
            });
          }
        }
      }
    }
    return retval;
  };

  mostFrequent = function(valarray) {
    var max, maxv, rv, v, _i, _len;
    rv = {};
    max = 0;
    maxv = "";
    for (_i = 0, _len = valarray.length; _i < _len; _i++) {
      v = valarray[_i];
      rv[v] = (rv[v] === void 0 ? 1 : rv[v] + 1);
      if (rv[v] > max) {
        max = rv[v];
        maxv = v;
      }
    }
    return maxv;
  };

  normalisevalues = function(keyvaluearray) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = keyvaluearray.length; _i < _len; _i++) {
      item = keyvaluearray[_i];
      _results.push(item.value);
    }
    return _results;
  };

  removematches = function(tomatch, list) {
    return list.filter(function(x) {
      var z;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tomatch.length; _i < _len; _i++) {
          z = tomatch[_i];
          if (arrayEqual(z.k, x.k)) {
            _results.push(z.k);
          }
        }
        return _results;
      })()).length === 0;
    });
  };

  arrayEqual = function(a, b) {
    return a.length === b.length && a.every(function(elem, i) {
      return elem === b[i];
    });
  };

  todayStartAsMillis = function() {
    var d;
    d = new Date();
    d.setUTCHours(0);
    d.setMinutes(0);
    d.setSeconds(0);
    d.setMilliseconds(0);
    return d.getTime();
  };

  todayMidnightAsMillis = function() {
    var d;
    d = new Date();
    d.setUTCHours(23);
    d.setMinutes(59);
    d.setSeconds(59);
    d.setMilliseconds(0);
    return d.getTime();
  };

  uniqueDateString = function(timeString) {
    var d;
    d = new Date(parseInt(timeString));
    return d.getFullYear() + d.getMonth() + d.getDate();
  };

}).call(this);

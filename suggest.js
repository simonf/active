// Generated by CoffeeScript 1.7.1
(function() {
  var db, debug, doubleshift, keyEqual, makeCandidates, moreFrequentThan, mostFrequent, removematches, root, todayMidnightAsMillis, todayStartAsMillis, uniqueCategoryAction, uniqueDateString;

  db = require('./couch-calls');

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  debug = false;

  root.suggest = function(req, resp) {
    var lastfivedays, lastthreeweeks, today;
    today = [];
    lastfivedays = [];
    lastthreeweeks = [];
    db.getToday(req, function(t) {
      if (t === null || t === void 0 || t.rows === void 0) {
        if (debug === true) {
          console.log("No actions found for today");
        }
      } else {
        today = uniqueCategoryAction(t);
        if (debug === true) {
          console.log("" + t.rows.length + " actions so far today");
        }
      }
      db.getLastFiveDays(req, function(five) {
        var f;
        if (debug === true) {
          console.log("" + five.rows.length + " actions in the last 5 days");
        }
        f = uniqueCategoryAction(five);
        if (debug === true) {
          console.log("" + f.length + " unique actions");
        }
        lastfivedays = removematches(today, moreFrequentThan(f, 4));
        if (debug === true) {
          console.log("" + lastfivedays.length + " remain");
        }
        return makeCandidates(resp, lastfivedays);
      });
    });
  };

  makeCandidates = function(resp, catactionobjarray) {
    var ca, vlist, _i, _len;
    vlist = [];
    for (_i = 0, _len = catactionobjarray.length; _i < _len; _i++) {
      ca = catactionobjarray[_i];
      vlist.push({
        "category": ca.key.category,
        "action": ca.key.action,
        "quantity": mostFrequent(ca.values),
        "units": ca.units
      });
    }
    resp.send(vlist);
  };

  mostFrequent = function(valarray) {
    var max, maxv, rv, val, _i, _len;
    rv = {};
    max = 0;
    maxv = "";
    for (_i = 0, _len = valarray.length; _i < _len; _i++) {
      val = valarray[_i];
      if (rv[val] === void 0) {
        rv[val] = 1;
      } else {
        rv[val] = rv[val] + 1;
      }
      if (rv[val] > max) {
        max = rv[val];
        maxv = val;
      }
    }
    return maxv;
  };

  moreFrequentThan = function(valarray, num) {
    return valarray.filter(function(x) {
      return x.count >= num;
    });
  };

  uniqueCategoryAction = function(dat) {
    var caqu, item, matched, obj, ucaobjectarray, _i, _j, _len, _len1;
    caqu = doubleshift(dat);
    if (debug === true) {
      console.log(caqu);
    }
    ucaobjectarray = [];
    for (_i = 0, _len = caqu.length; _i < _len; _i++) {
      item = caqu[_i];
      if (debug === true) {
        console.log("processing item");
      }
      matched = false;
      for (_j = 0, _len1 = ucaobjectarray.length; _j < _len1; _j++) {
        obj = ucaobjectarray[_j];
        if (!matched && obj.key.category === item.key[0] && obj.key.action === item.key[1]) {
          obj.count += 1;
          obj.values.push(item.key[2]);
          obj.units = item.key[3];
          matched = true;
        }
      }
      if (!matched) {
        obj = {
          "key": {
            "category": item.key[0],
            "action": item.key[1]
          },
          "count": 1,
          "values": [item.key[2]],
          "units": item.key[3]
        };
        ucaobjectarray.push(obj);
        if (debug === true) {
          console.log("added " + obj);
        }
      }
    }
    return ucaobjectarray;
  };

  doubleshift = function(dat) {
    var d, _i, _len, _ref;
    _ref = dat.rows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      d = _ref[_i];
      d.key.shift();
      d.key.shift();
    }
    return dat;
  };

  removematches = function(tomatch, list) {
    if (tomatch === null || tomatch.length === 0) {
      if (debug === true) {
        console.log("Nothing to match");
      }
      return list;
    } else {
      if (debug === true) {
        console.log("Filtering " + list.length + " unique 5-day entries vs " + tomatch.length + " unique entries today");
      }
      return list.filter(function(x) {
        var z;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = tomatch.length; _i < _len; _i++) {
            z = tomatch[_i];
            if (keyEqual(z.key, x.key)) {
              _results.push(z);
            }
          }
          return _results;
        })()).length === 0;
      });
    }
  };

  keyEqual = function(a, b) {
    if (typeof a === 'object' && typeof b === 'object') {
      return a.category === b.category && a.action === b.action;
    } else {
      console.log("Can't match values that are not arrays: " + a + ", " + b);
      return false;
    }
  };

  todayStartAsMillis = function() {
    var d;
    d = new Date();
    d.setUTCHours(0);
    d.setMinutes(0);
    d.setSeconds(0);
    d.setMilliseconds(0);
    return d.getTime();
  };

  todayMidnightAsMillis = function() {
    var d;
    d = new Date();
    d.setUTCHours(23);
    d.setMinutes(59);
    d.setSeconds(59);
    d.setMilliseconds(0);
    return d.getTime();
  };

  uniqueDateString = function(timeString) {
    var d;
    d = new Date(parseInt(timeString));
    return d.getFullYear() + d.getMonth() + d.getDate();
  };

}).call(this);
